@{
    ViewData["Title"] = "Biblia";
    var selectedVerses = new List<int>();
}

@model Church.WebApp.Controllers.TranslationControllerModel
@using IBE.Common.Extensions

@if (Model == null) {
    <h1>Nie przekazano nazwy przekładu</h1>
}
else if (String.IsNullOrEmpty(Model.Book)) {
    //
    // Wyświetlanie listy ksiąg dla wskazanego przekładu
    //

    ViewData["Title"] = Model.Translation.Description;

    <div class="d-grid gap-2 d-md-flex justify-content-md-end">

        @switch (Model.Translation.Type) {
            case IBE.Data.Model.TranslationType.Dynamic: {
            @Html.Raw(@"<div class=""alert alert-danger mb-0"" role=""alert"">Przekład dynamiczny może zawierać tendencyjne, dalekie od oryginału tłumaczenie</div>")
            break;
        }
    case IBE.Data.Model.TranslationType.Literal: {
    @Html.Raw(@"<div class=""alert alert-success mb-0"" role=""alert"">Przekład dosłowny</div>")
    break;
}
case IBE.Data.Model.TranslationType.Default: {
@Html.Raw(@"<div class=""alert alert-info mb-0"" role=""alert"">Przekład literacki</div>")
break;
}
}

    </div>

    <h1 class="text-center p-2">@Model.Translation.Description</h1>

    <div class="container">
        <div class="row border bg-light justify-content-center" style="max-width: 800px; margin: auto;">
            @foreach (var book in Model.Translation.Books) {
                var color = System.Drawing.ColorTranslator.FromHtml(@book.Color);
                var bookHtml = book.BookShortcut.Replace(" ", "&nbsp;");
                if (Model.Translation.Type == IBE.Data.Model.TranslationType.Interlinear) {
                    bookHtml = $"{book.BaseBook.BookShortcut}&nbsp;({bookHtml})";
                }

                <div class="col p-2" style="background-color: rgba(@color.R, @color.G, @color.B, 0.3);" title="@book.BaseBook.BookTitle">
                    <a class="btn fs-4" style="background-color: rgba(@color.R, @color.G, @color.B, 0.5);" title="@book.BaseBook.BookTitle" asp-area="" asp-controller="Translation" asp-action="Index" asp-route-translationName="@Model.Translation.Name.Replace("'", "").Replace("+", "")" asp-route-book="@book.NumberOfBook" asp-route-chapter="1">@Html.Raw(bookHtml)&nbsp;<span class="badge bg-success rounded-pill">@book.NumberOfChapters</span></a>
                </div>
            }
        </div>
    </div>

    @if (Model.Translation.Introduction.IsNotNullOrEmpty()) {
        <div class="lh-lg fs-6" style="text-align: justify; max-width: 800px; margin: auto;">

            <br />
            <h4 class="text-center">Wprowadzenie</h4>
            @{var textIntroduction = System.Text.RegularExpressions.Regex.Replace(Model.Translation.Introduction, @"[\s\(\,\;][a,i,o,w,z]\s", delegate (System.Text.RegularExpressions.Match m) {
                    return " " + m.Value.Trim() + "&nbsp;";
                }, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            }
            @Html.Raw(textIntroduction)
        </div>
    }

    <div class="lh-lg fs-6" style="text-align: justify; max-width: 800px; margin: auto;">
        <br />
        <h4 class="text-center">Prawa autorskie i szczegółowe informacje</h4>
        @if (Model.Translation.DetailedInfo != null) {
            var textDetailedInfo = System.Text.RegularExpressions.Regex.Replace(Model.Translation.DetailedInfo, @"[\s\(\,\;][a,i,o,w,z]\s", delegate (System.Text.RegularExpressions.Match m) {
                return " " + m.Value.Trim() + "&nbsp;";
            }, System.Text.RegularExpressions.RegexOptions.IgnoreCase);

            @Html.Raw(textDetailedInfo)

        }
        <p>
            * Prezentowane treści należą do ich właścicieli i&nbsp;wydawców. Tekst pobrany z&nbsp;udostępnionych zasobów programu <a href="https://mybible.zone/">MyBible</a> - <a href="https://www.ph4.org/b4_index.php">www.ph4.org</a>
        </p>
    </div>
}
else {
    //
    // Wyświetlanie treści rozdziałów poszczególnych ksiąg
    //

    IBE.Data.Model.Book book = Model.Translation.Books.Where(x => x.NumberOfBook == Convert.ToInt32(Model.Book)).FirstOrDefault();
    if (book.IsNotNull()) {
        ViewData["Title"] = Model.Translation.Description + " - " + book.BaseBook.BookTitle;

        <div class="d-grid gap-2 d-md-flex justify-content-md-end">

            @switch (Model.Translation.Type) {
                case IBE.Data.Model.TranslationType.Dynamic: {
                @Html.Raw(@"<div class=""alert alert-danger mb-0"" role=""alert"">Przekład dynamiczny może zawierać tendencyjne, dalekie od oryginału tłumaczenie</div>")
                break;
            }
        case IBE.Data.Model.TranslationType.Literal: {
        @Html.Raw(@"<div class=""alert alert-success mb-0"" role=""alert"">Przekład dosłowny</div>")
        break;
    }
case IBE.Data.Model.TranslationType.Default: {
@Html.Raw(@"<div class=""alert alert-info mb-0"" role=""alert"">Przekład literacki</div>")
break;
}
}

            @if (book.BaseBook.Status.CanonType == IBE.Data.Model.CanonType.SecondCanon) {
                <div class="alert alert-warning mb-0" role="alert">Uwaga! @book.BaseBook.BookTitle jest księgą wtórnie-kanoniczną</div>
            }
            else if (book.BaseBook.Status.CanonType == IBE.Data.Model.CanonType.Apocrypha) {
                <div class="alert alert-warning mb-0" role="alert">Uwaga! @book.BaseBook.BookTitle jest apokryfem, nie należy do kanonu Biblii Hebrajskiej</div>
            }


            <button class="btn btn-primary dropdown-toggle my-dropdown" type="button" id="dropdownMenuButtonTranslations" data-bs-toggle="dropdown" aria-expanded="false">
                Inny przekład
            </button>
            <ul class="dropdown-menu dropdown-menu-dark scrollable-menu" aria-labelledby="dropdownMenuButtonTranslations">
                @foreach (var _trans in Model.Translations) {
                    var _active = String.Empty;
                    if (_trans.Name == Model.Translation.Name) {
                        _active = " active";
                    }

                    <li>
                        @if (Model.Verse.IsNotNullOrEmpty()) {
                            <a class="dropdown-item@_active" asp-area="" asp-controller="Translation" asp-action="Index" asp-route-translationName="@_trans.Name.Replace("'", "").Replace("+", "")" asp-route-book="@Model.Book" asp-route-chapter="@Model.Chapter" asp-route-verse="@Model.Verse">@_trans.Description</a>
                        }
                        else {
                            <a class="dropdown-item@_active" asp-area="" asp-controller="Translation" asp-action="Index" asp-route-translationName="@_trans.Name.Replace("'", "").Replace("+", "")" asp-route-book="@Model.Book" asp-route-chapter="@Model.Chapter">@_trans.Description</a>
                        }
                    </li>
                }
            </ul>

            <button class="btn btn-warning dropdown-toggle my-dropdown" type="button" id="dropdownMenuButtonBooks" data-bs-toggle="dropdown" aria-expanded="false">
                Wybór księgi
            </button>
            <ul class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenuButtonBooks">
                @foreach (var _book in Model.Translation.Books) {
                    var _active = String.Empty;
                    if (_book.NumberOfBook == book.NumberOfBook) {
                        _active = " active";
                    }

                    var _secondCanon = String.Empty;
                    if (_book.BaseBook.Status.CanonType == IBE.Data.Model.CanonType.SecondCanon) {
                        _secondCanon = " text-warning bg-dark";
                    }

                    <li><a class="dropdown-item@_active@_secondCanon" asp-area="" asp-controller="Translation" asp-action="Index" asp-route-translationName="@Model.Translation.Name.Replace("'", "").Replace("+", "")" asp-route-book="@_book.NumberOfBook" asp-route-chapter="1">@_book.BaseBook.BookTitle</a></li>
                }
            </ul>


            <button class="btn btn-info dropdown-toggle my-dropdown" type="button" id="dropdownMenuButtonChapters" data-bs-toggle="dropdown" aria-expanded="false">
                Wybór rozdziału
            </button>
            <ul class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenuButtonChapters">
                @for (int i = 1; i <= book.NumberOfChapters; i++) {
                    var _active = String.Empty;
                    if (i == Convert.ToInt32(Model.Chapter)) {
                        _active = " active";
                    }

                    <li><a class="dropdown-item@_active" asp-area="" asp-controller="Translation" asp-action="Index" asp-route-translationName="@Model.Translation.Name.Replace("'", "").Replace("+", "")" asp-route-book="@book.NumberOfBook" asp-route-chapter="@i">@i</a></li>
                }
            </ul>
        </div>

        <h1 class="text-center p-2"><a class="text-decoration-none text-dark" asp-area="" asp-controller="Translation" asp-action="Index" asp-route-translationName="@Model.Translation.Name.Replace("'", "").Replace("+", "")" asp-route-book="@null">@Model.Translation.Description</a></h1>
        <h2 class="text-center p-2">@book.BaseBook.BookTitle</h2>


        if (book.NumberOfBook == 230) {
            <h2 class="text-center p-2">@Model.Translation.ChapterPsalmString @Model.Chapter</h2>
        }
        else {
            <h2 class="text-center p-2">@Model.Translation.ChapterString @Model.Chapter</h2>
        }

        var chapter = book.Chapters.Where(x => x.NumberOfChapter == Convert.ToInt32(Model.Chapter)).FirstOrDefault();
        var footNoteIndex = 1;
        var footNoteRefIndex = 0;
        var footNotes = new List<string>();

        string[] modelVerses = null;
        if (!String.IsNullOrEmpty(Model.Verse)) {
            var activeVerse = String.Empty;
            modelVerses = Model.Verse.Split(',');
            foreach (var modelVerse in modelVerses) {
                if (!String.IsNullOrEmpty(modelVerse)) {
                    selectedVerses.Add(Convert.ToInt32(modelVerse.Trim()));
                }
            }
        }

        <div class="lh-base fs-6" style="max-width: 1000px; margin: auto; text-align: justify;">
            @if (Model.Translation.Type == IBE.Data.Model.TranslationType.Interlinear) {
                // --------------------------------------------------
                // Wyswietlanie treści przekładu interlinearnego
                // --------------------------------------------------
                footNoteRefIndex = 1;

                @foreach (var verse in chapter.Verses) {

                    var activeVerse = !String.IsNullOrEmpty(Model.Verse) && selectedVerses.Contains(verse.NumberOfVerse) ? "background-color: #fffee3;" : " ";

                    if (verse == chapter.Verses.First()) {
                        @Html.Raw(@"<div class=""row"">")
                    }
                    else if (verse.StartFromNewLine) {
                        @Html.Raw(@"</div><div class=""row"">")
                    }

                    //
                    // Słowa wersetu
                    //
                    var words = verse.VerseWords.OrderBy(x => x.NumberOfVerseWord);
                    foreach (var word in words) {
                        //var isPenultimate = verse.VerseWords.Count > 2 && word == verse.VerseWords[verse.VerseWords.Count - 2];
                        //var penultimateWidth = isPenultimate ? "max-width: 200px;" : String.Empty;
                        var isFirst = word == verse.VerseWords.First();
                        var gc = word.GrammarCode.IsNotNull() ? $"<a class=\"text-decoration-none\" style=\"padding-left: 0 !important;\" href=\"http://www.modernliteralversion.org/bibles/bs2/RMAC/{word.GrammarCode.GrammarCodeVariant1}.htm\" target=\"_blank\">{word.GrammarCode.GrammarCodeVariant1}</a>" : String.Empty;
                        var sc = word.StrongCode.IsNotNull() ? $"<a class=\"text-decoration-none\" style=\"padding-left: 0 !important;\" href=\"https://www.blueletterbible.org/lang/lexicon/lexicon.cfm?Strongs=G{word.StrongCode.Code}&t=MGNT\" target=\"_blank\">G{word.StrongCode.Code}</a>" : String.Empty;
                        var translation = word.Translation;
                        if (translation.IsNull()) { translation = "―"; }
                        translation = translation.Replace(" ", "&nbsp;").Replace("<n>", @"<span class=""text-muted"">").Replace("</n>", "</span>");

                        var footnoteText = word.FootnoteText;
                        if (footnoteText.IsNotNullOrEmpty() && footnoteText.Contains("<x>")) {
                            footnoteText = System.Text.RegularExpressions.Regex.Replace(footnoteText, @"\<x\>(?<book>[0-9]+)\s(?<chapter>[0-9]+)(\s)?\:(\s)?(?<verseStart>[0-9]+)\-(?<verseEnd>[0-9]+)\<\/x\>", delegate (System.Text.RegularExpressions.Match m) {
                                var translationName = "NPI";
                                var numberOfBook = m.Groups["book"].Value.ToInt();
                                var bookShortcut = Model.Translation.Books.Where(x => x.NumberOfBook == Convert.ToInt32(m.Groups["book"].Value)).First().BaseBook.BookShortcut;
                                var numberOfChapter = m.Groups["chapter"].Value.ToInt();
                                var verseStart = m.Groups["verseStart"].Value.ToInt();
                                var verseEnd = m.Groups["verseEnd"].Value.ToInt();
                                var versesText = String.Empty;
                                for (int i = verseStart; i <= verseEnd; i++) {
                                    versesText += $"{i}";
                                    if (i != verseEnd) { versesText += ","; }
                                }

                                return $"<a href=\"../{translationName}/{numberOfBook}/{numberOfChapter}/{versesText}>{bookShortcut} {numberOfChapter}:{verseStart}-{verseEnd}</a>)";
                            });
                            footnoteText = System.Text.RegularExpressions.Regex.Replace(footnoteText, @"\<x\>(?<book>[0-9]+)\s(?<chapter>[0-9]+)(\s)?\:(\s)?(?<verseStart>[0-9]+)\<\/x\>", delegate (System.Text.RegularExpressions.Match m) {
                                var numberOfBook = m.Groups["book"].Value.ToInt();
                                var bookShortcut = Model.Translation.Books.Where(x => x.NumberOfBook == Convert.ToInt32(m.Groups["book"].Value)).First().BaseBook.BookShortcut;
                                var numberOfChapter = m.Groups["chapter"].Value.ToInt();
                                var verseStart = m.Groups["verseStart"].Value.ToInt();


                                return $"<a href=\"../{numberOfBook}/{numberOfChapter}/{verseStart}\">{bookShortcut} {numberOfChapter}:{verseStart}</a>";
                            });
                        }


                        if (footnoteText.IsNotNullOrEmpty()) {
                            translation += $@"<a style=""position: absolute; top: -6px; font-size: 80%;"" class=""text-decoration-none"" href=""#footNote{footNoteRefIndex}"">{footNoteRefIndex}</a>";
                            footNotes.Add($@"<p class=""mb-0""><a name=""footNote{footNoteRefIndex}"" />{footNoteRefIndex})&nbsp;{footnoteText}</p>");
                            footNoteRefIndex++;
                        }

                        var translationFontWeight = word.Citation ? "font-weight: bold;" : "font-weight: 400;";
                        var translationFontColor = word.WordOfJesus ? "text-danger" : "";

                        <div class="col pb-3" style="padding-left: 0 !important; max-width: 235px; @activeVerse">
                            <div class="container" style="position: relative">
                                @if (isFirst) {
                                    //
                                    // Numer wersetu
                                    //

                                    <div style="position: absolute; left: -20px; font-weight: bold;">
                                        <a name="Verse_@verse.NumberOfVerse" id="Verse_@verse.NumberOfVerse"></a>
                                        @verse.ParentChapter.NumberOfChapter,@verse.NumberOfVerse
                                    </div>
                                }
                                @{
                                    //
                                    // Kody stronga
                                    //
                                }
                                <div class="row" style="font-size: 50%; padding-left: 0 !important;">
                                    <div class="col">
                                        @Html.Raw(sc)
                                        <br />
                                        @Html.Raw(gc)
                                    </div>
                                </div>
                                <div class="row" style="font-weight: 200;"><div class="col">@word.SourceWord</div></div>
                                <div class="row" style="font-size: 80%; font-weight: 200;"><div class="col">@word.Transliteration</div></div>
                                <div class="row @translationFontColor" style="@translationFontWeight position: relative; min-width: 70px;"><div class="col">@Html.Raw(translation)</div></div>
                            </div>
                        </div>
                    }
                }

                @Html.Raw("</div>")

                @if (footNotes.Count > 0) {
                    <hr style="max-width: 30%;" />
                    <div class="lh-sm fs-6" style="text-align: left">
                        @foreach (var item in footNotes) {
                            @Html.Raw(item)
                        }
                    </div>
                }
            }
            else {
                foreach (var verse in chapter.Verses) {
                    //
                    // Sródtytuły
                    //
                    if (chapter.Subtitles != null && chapter.Subtitles.Count > 0) {
                        var subtitles = chapter.Subtitles.Where(x => x.BeforeVerseNumber == verse.NumberOfVerse).OrderBy(x => x.Level);
                        if (subtitles.Count() > 0) {
                            foreach (var story in subtitles) {

                                var storyText = story.Text;
                                // <x>230 1-41</x>
                                if (storyText.Contains("<x>")) {
                                    var pattern = @"\<x\>(?<book>[0-9]+)\s(?<num>[0-9]+\-[0-9]+)\<\/x\>";
                                    var pattern2 = @"\<x\>(?<book>[0-9]+)\s(?<num>[0-9]+(\s)?\:(\s)?[0-9]+\-[0-9]+)\<\/x\>";
                                    var regex = new System.Text.RegularExpressions.Regex(pattern);
                                    var match = regex.Match(storyText.Trim());
                                    if (match.Success) {
                                        storyText = $"({Model.Translation.Books.Where(x => x.NumberOfBook == Convert.ToInt32(match.Groups["book"].Value)).First().BookName} {match.Groups["num"].Value})";
                                    }
                                    else {
                                        regex = new System.Text.RegularExpressions.Regex(pattern2);
                                        match = regex.Match(storyText.Trim());
                                        if (match.Success) {
                                            storyText = $"({Model.Translation.Books.Where(x => x.NumberOfBook == Convert.ToInt32(match.Groups["book"].Value)).First().BookName} {match.Groups["num"].Value})";
                                        }
                                    }
                                }

                                if (book.BaseBook.Status.BiblePart == IBE.Data.Model.BiblePart.OldTestament) {
                                    storyText = System.Text.RegularExpressions.Regex.Replace(storyText, @"\sPAN(A)?(EM)?(U)?(IE)?", delegate (System.Text.RegularExpressions.Match m) {
                                        return " JAHWE";
                                    });
                                }

                                if (story.Level == 1) {
                                    <h4 class="text-center p-2">@storyText</h4>
                                }
                                else {
                                    <h5 class="text-center p-2">@storyText</h5>
                                }
                            }
                        }
                    }

                    //
                    // Treści wersetów
                    //

                    var text = " " + verse.Text;
                    if (text.Contains("<n>") && text.Contains("*")) {
                        var footNoteTextPatternFragment = @"\w\s\.\=\""\,\;\:\-\(\)\<\>\„\”\/\!";
                        var f1 = $@"\[\*\s?(?<f1>[{footNoteTextPatternFragment}]+)\]";
                        var f2 = $@"\[\*\*\s?(?<f2>[{footNoteTextPatternFragment}]+)\]";
                        var f3 = $@"\[\*\*\*\s?(?<f3>[{footNoteTextPatternFragment}]+)\]";
                        var footNoteTextPattern = $@"\<n\>{f1}(\s+)?({f2})?(\s+)?({f3})?\</n\>";

                        var f1Index = 0;
                        var f2Index = 0;
                        var f3Index = 0;

                        text = System.Text.RegularExpressions.Regex.Replace(text, footNoteTextPattern, delegate (System.Text.RegularExpressions.Match m) {
                            if (m.Groups != null && m.Groups.Count > 0) {
                                if (m.Groups["f1"] != null && m.Groups["f1"].Success) {
                                    footNotes.Add($@"<p class=""mb-0""><a name=""footNote{footNoteIndex}"" />{footNoteIndex})&nbsp;{m.Groups["f1"].Value}</p>");
                                    f1Index = footNoteIndex;
                                    footNoteIndex++;
                                }
                                if (m.Groups["f2"] != null && m.Groups["f2"].Success) {
                                    footNotes.Add($@"<p class=""mb-0""><a name=""footNote{footNoteIndex}"" />{footNoteIndex})&nbsp;{m.Groups["f2"].Value}</p>");
                                    f2Index = footNoteIndex;
                                    footNoteIndex++;
                                }
                                if (m.Groups["f3"] != null && m.Groups["f3"].Success) {
                                    footNotes.Add($@"<p class=""mb-0""><a name=""footNote{footNoteIndex}"" />{footNoteIndex})&nbsp;{m.Groups["f3"].Value}</p>");
                                    f3Index = footNoteIndex;
                                    footNoteIndex++;
                                }
                            }

                            var result = String.Empty;
                            return result;
                        }, System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                        var footNotePattern = @"(\*)+";
                        text = System.Text.RegularExpressions.Regex.Replace(text, footNotePattern, delegate (System.Text.RegularExpressions.Match m) {
                            if (m.Value == "*") { footNoteRefIndex = f1Index; }
                            if (m.Value == "**") { footNoteRefIndex = f2Index; }
                            if (m.Value == "***") { footNoteRefIndex = f3Index; }
                            var result = $@"<a style=""vertical-align: super;"" class=""fs-6 text-decoration-none"" href=""#footNote{footNoteRefIndex}"">{footNoteRefIndex}</a>";

                            return result;
                        }, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                    }

                    // Słowa Jezusa
                    text = text.Replace("<J>", @"<span class=""text-danger"">").Replace("</J>", "</span>");

                    // Elementy dodane
                    text = text.Replace("<n>", @"<span class=""text-muted"">").Replace("</n>", "</span>");

                    text = text.Replace("<pb/>", "").Replace("<t>", "").Replace("</t>", "").Replace("<e>", "").Replace("</e>", "");

                    // zamiana na imię Boże
                    if (book.BaseBook.Status.BiblePart == IBE.Data.Model.BiblePart.OldTestament) {
                        text = System.Text.RegularExpressions.Regex.Replace(text, @"\s(?<name>PAN(A)?(EM)?(U)?(IE)?)[\s\,\.\:]", delegate (System.Text.RegularExpressions.Match m) {
                            return " JAHWE" + m.Value.Last();
                        });
                    }

                    // usuwam sierotki
                    text = System.Text.RegularExpressions.Regex.Replace(text, @"[\s\(\,\;][a,i,o,w,z]\s", delegate (System.Text.RegularExpressions.Match m) {
                        return " " + m.Value.Trim() + "&nbsp;";
                    }, System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                    // usuwam puste przypisy
                    text = System.Text.RegularExpressions.Regex.Replace(text, @"\[[0-9]+\]", delegate (System.Text.RegularExpressions.Match m) {
                        return String.Empty;
                    }, System.Text.RegularExpressions.RegexOptions.IgnoreCase);


                    var activeVerse = !String.IsNullOrEmpty(Model.Verse) && selectedVerses.Contains(verse.NumberOfVerse) ? "background-color: #fffee3;" : " ";

                    <span id="span-verse-@verse.NumberOfVerse" class="lh-lg fs-5" style="@activeVerse">
                        <a name="Verse_@verse.NumberOfVerse" id="Verse_@verse.NumberOfVerse"></a>
                        <span class="fw-bold">@verse.NumberOfVerse</span><span>.&nbsp;@Html.Raw(text.Trim())&nbsp;</span>
                    </span>
                }

                @if (footNotes.Count > 0) {
                    <hr style="max-width: 30%;" />
                    <div class="lh-sm fs-6" style="text-align: left">
                        @foreach (var item in footNotes) {
                            @Html.Raw(item)
                        }
                    </div>
                }
            }
        </div>

        <div>&nbsp;</div>

        //
        // Paging
        //

        var _disabledStart = chapter.NumberOfChapter == 1 ? " disabled" : "";
        var _disabledEnd = chapter.NumberOfChapter == book.NumberOfChapters ? " disabled" : "";

        var tableOfNumber = new List<int>();
        if ((chapter.NumberOfChapter - 3) > 1) {
            tableOfNumber.Add(chapter.NumberOfChapter - 3);
        }
        if ((chapter.NumberOfChapter - 2) > 1) {
            tableOfNumber.Add(chapter.NumberOfChapter - 2);
        }
        if ((chapter.NumberOfChapter - 1) > 1) {
            tableOfNumber.Add(chapter.NumberOfChapter - 1);
        }
        tableOfNumber.Add(chapter.NumberOfChapter);
        if ((chapter.NumberOfChapter + 1) <= book.NumberOfChapters) {
            tableOfNumber.Add(chapter.NumberOfChapter + 1);
        }
        if ((chapter.NumberOfChapter + 2) <= book.NumberOfChapters) {
            tableOfNumber.Add(chapter.NumberOfChapter + 2);
        }
        if ((chapter.NumberOfChapter + 3) <= book.NumberOfChapters) {
            tableOfNumber.Add(chapter.NumberOfChapter + 3);
        }

        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-center pagination-sm">
                <li class="page-item@_disabledStart">
                    <a class="page-link" aria-label="Poprzedni" asp-area="" asp-controller="Translation" asp-action="Index" asp-route-translationName="@Model.Translation.Name.Replace("'", "").Replace("+", "")" asp-route-book="@book.NumberOfBook" asp-route-chapter="@(chapter.NumberOfChapter - 1)">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>

                @foreach (var i in tableOfNumber) {
                    var _active = i == chapter.NumberOfChapter ? " active" : "";
                    var _activeTextColor = i == chapter.NumberOfChapter ? " text-light" : "text-dark";
                    <li class="page-item@_active">
                        <a class="page-link @_activeTextColor" asp-area="" asp-controller="Translation" asp-action="Index" asp-route-translationName="@Model.Translation.Name.Replace("'", "").Replace("+", "")" asp-route-book="@book.NumberOfBook" asp-route-chapter="@i">@i</a>
                    </li>
                }

                <li class="page-item">
                    <a class="page-link@_disabledEnd" aria-label="Next" asp-area="" asp-controller="Translation" asp-action="Index" asp-route-translationName="@Model.Translation.Name.Replace("'", "").Replace("+", "")" asp-route-book="@book.NumberOfBook" asp-route-chapter="@(chapter.NumberOfChapter + 1)">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>

        <div class="lh-lg fs-6" style="text-align: justify; max-width: 1000px; margin: auto;">
            <br />
            <h4>Prawa autorskie i szczegółowe informacje</h4>

            @if (Model.Translation.DetailedInfo != null) {
                var textDetailedInfo = System.Text.RegularExpressions.Regex.Replace(Model.Translation.DetailedInfo, @"[\s\(\,\;][a,i,o,w,z]\s", delegate (System.Text.RegularExpressions.Match m) {
                    return " " + m.Value.Trim() + "&nbsp;";
                }, System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                @Html.Raw(textDetailedInfo)

            }
            <p>
                * Prezentowane treści należą do ich właścicieli i&nbsp;wydawców. Tekst pobrany z&nbsp;udostępnionych zasobów programu <a href="https://mybible.zone/">MyBible</a> - <a href="https://www.ph4.org/b4_index.php">www.ph4.org</a>
            </p>
        </div>

        @section Scripts {

            @if (!String.IsNullOrEmpty(Model.Verse)) {

                <script>
    docReady(function () {
        setTimeout(function () {

            const topNavId = 'top-nav';
            const topNav = document.getElementById(topNavId);

            const id = 'Verse_@selectedVerses.First()';
            const yOffset = -(topNav.offsetHeight); //-55;
            const element = document.getElementById(id);
            const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

            window.scrollTo({ top: y, behavior: 'smooth' });
        }, 1000);

    });
                </script>

            }
        }
    }
}
